<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="ch-logic">
	<title>論理</title>
	<introduction>
		<p>本章では、論理に基づく問題解決の枠組みや、集合、命題などの基礎的な概念を示した上で、一般的な証明法について述べる。</p>
		<p><xref ref="sec-logic-problem"/>節では、問題解決の基本的な枠組みを示す。
		<xref ref="sec-logic-prop"/>節では、論理の基礎となる命題と、命題を中心とする命題論理について述べる。
		<xref ref="sec-logic-set"/>節では、現代数学の基礎となっている集合について述べる。
		<xref ref="sec-logic-pred"/>節では、命題論理に「すべて」「ある」を加えた枠組みである述語論理について述べる。
		<xref ref="sec-logic-mode"/>節では、述語論理のうち「必ず」「ありうる」などの様相を扱う様相論理について述べる。
		<xref ref="sec-logic-infer"/>節では、命題の間をつなぐ推論の種類について述べる。
		<xref ref="sec-logic-proof"/>節では、推論のうちの演繹による証明について述べる。</p>
	</introduction>

	<section xml:id="sec-logic-problem">
		<title>問題解決</title>
		<p>数学では、未知の事柄がある状況を<dfn en="problem">問題</dfn>として捉え、問題を<dfn en="solve">解決</dfn>して未知の事柄を明らかにすることを目的とする。
		より厳密には、未知の事柄がある状態を「<dfn en="As-Is">現在の状態</dfn>」、未知の事柄が明らかになった状態を「<dfn en="To-Be">目標の状態</dfn>」として、<strong>現在の状態と理想の状態の間に差があること</strong>を、<dfn en="problem">問題</dfn>だと定義する<xref ref="bib-simon2"/><xref ref="bib-newell"/>。
		図<xref ref="fig-problem"/>に、問題とその解の関係を示す。</p>
		<p>また、ある問題について<strong>現在の状態から目標の状態へ至る道筋</strong>を、その問題の<dfn en="solution">解</dfn>という。
		解は必ず1つであるとは限らず、解が複数あることや、解が1つもないこともある。
		解が複数ある場合、早く目標に到達できる解もあれば、目標に達するまで時間がかかる解や、高速だが正確性に欠ける解、機械を使えば計算できるが人手で扱うのは難しい解など、さまざまなものがある。
		そのため、その場その場の状況に応じて、適した解を選ぶ必要がある。</p>
		<definition>
			<title>問題</title>
			<statement>
				<dfn strong="0" en="To-Be">目標とする状態</dfn>と<dfn strong="0" en="As-Is">現在の状態</dfn>の間に<em>差</em>があるとき、この差を<dfn en="problem">問題</dfn>という<xref ref="bib-simon2"/>。
				<em>現在の状態から目標とする状態に至る方法を見つける</em>ことを<dfn en="problem solving">問題解決</dfn>といい、この方法をその問題の<dfn en="solution">解</dfn>という<xref ref="bib-newell"/>。
			</statement>
		</definition>

		<figure xml:id="fig-problem">
			<image source="image/problem" width="50%"/>
			<caption>問題の定義</caption>
		</figure>

		<p>より具体的な数学による問題解決の過程を、図<xref ref="fig-math-problem"/>に示す<xref ref="bib-oecd"/>。</p>
		<figure xml:id="fig-math-problem">
			<image source="image/math-problem" width="75%"/>
			<caption>OECDによるモデル</caption>
		</figure>
	</section>

	<section xml:id="sec-logic-prop">
		<title>命題論理</title>
		<introduction>
			<p>数学では、式や文を命題という形で扱う<dfn en="propositional logic">命題論理</dfn>の論理が、最も基本的な枠組みである。</p>
		</introduction>
		<subsection xml:id="ssec-logic-prop">
			<title>命題</title>
			<p>数学が基盤とする論理学では、客観的な分析が可能な文を<dfn en="proposition">命題</dfn>として扱い、複数の命題を推論で接続することで論理を展開する。</p>
			<definition>
				<title>命題</title>
				<statement>
					<em>「正しい」か「正しくない」かが明確に定まる</em>式や文のことを<dfn en="proposition">命題</dfn>という。
					命題<m>p</m>が「正しい」とき、<m>p</m>は<dfn en="true">真</dfn>であるという。また、<m>p</m>が真でないとき、<m>p</m>は<dfn en="false">偽</dfn>であるという。
					命題<m>p</m>が真であることを<m>p</m>が<dfn>成り立つ</dfn>、命題<m>p</m>が偽であることを<m>p</m>が<dfn>成り立たない</dfn>ともいう。
				</statement>
			</definition>
			<p>特に、真である命題を<dfn en="theorem">定理</dfn>という。ただし、一般的に「定理」という場合は、「真である命題」のうち「何らかの基準に照らして<em>重要なもの</em>」を指すことが多い。</p>
			<p>命題を文字で表す場合、propositionの頭文字の<m>p</m>を用い、複数の命題を文字で表すときは<m>q</m>や<m>r</m>も用いることが多い。流儀によっては、命題を大文字の<m>P</m>や<m>Q</m>で表すことも多い。</p>
			<example>
				<title>命題の例</title>
				<statement>
					「富士山は高い山である」という文は、「高い」という形容詞に対する解釈が人によって異なるため、命題でない。
					富士山の近辺に住んでいる人は「富士山は高い」と解釈する可能性が高いが、エベレストの近辺に住んでいる人は「富士山は高くない」と解釈する可能性が高い。
					一方、「富士山は天保山より高い山である」という文にも、同じように「高い」という形容詞が含まれる。
					だがこの文では、「富士山(の標高)」と「天保山(の標高)」という数値で大小比較可能なものを比べているため、誰が判断しても真になると考えられ、命題だといえる。
				</statement>
			</example>
		</subsection>

		<subsection xml:id="ssec-logic-andornot">
			<title>「かつ」「または」「でない」</title>
			<p>命題についての基本的な操作には、1つの命題に対する<dfn>否定</dfn>や、2つ以上の命題に対する「<dfn>かつ</dfn>(連言)」「<dfn>または</dfn>(選言)」がある。</p>
			<definition>
				<title>連言・選言・否定</title>
				<statement>
					<m>p, q</m>を命題とするとき、<m>p, q</m>の<em>両方</em>が真のときに真となり、それ以外のときに偽となる命題を「<m>p</m><dfn>かつ</dfn><m>q</m>」といい、<m>p \land q</m>と表すことがある。
					また、<m>p, q</m>の<em>少なくとも一方</em>が真のときに真となり、それ以外のときに偽となる命題を「<m>p</m><dfn>または</dfn><m>q</m>」といい、<m>p \lor q</m>と表すことがある。
					更に、<m>p</m>が偽のときに真となり、真のときに偽となる命題を「<m>p</m>の<dfn>否定</dfn>」といい、<m>\overline{p}</m>と表す。
				</statement>
			</definition>
			<p>数学における「または」は、「どちらか一方が成り立つ」という意味ではなく「	<em>少なくとも一方</em>が成り立つ」という意味であることに注意が必要である。</p>
		</subsection>

		<subsection xml:id="ssec-logic-proplaw">
			<title>命題に関する計算法則</title>
			<p>「または」や「かつ」、「でない」については、次のような等式が成り立つ。</p>
			<theorem>
				<title>命題に関する計算法則</title>
				<statement>
					<m>p, q, r</m>が命題のとき、次の等式が成り立つ。
					<md>
						<mrow>p \lor  q &amp;= q \lor  p &amp; (\text{交換法則})</mrow>
						<mrow>p \land q &amp;= q \land p &amp; (\text{交換法則})</mrow>
						<mrow>(p \lor  q) \lor  r &amp;= p \lor  (q \lor  r) &amp; (\text{結合法則})</mrow>
						<mrow>(p \land q) \land r &amp;= p \land (q \land r) &amp; (\text{結合法則})</mrow>
					</md>
				</statement>
			</theorem>

			<p>命題に関する分配法則も成り立つが、数の分配法則と異なる部分もある。</p>
			<theorem>
				<title>命題に関する分配法則</title>
				<statement>
					<m>p, q, r</m>が命題のとき、次の等式が成り立つ。
					<md>
						<mrow>(p \lor  q) \land r = (p \land r) \lor  (q \land r)</mrow>
						<mrow>(p \land q) \lor  r = (p \lor  r) \land (q \lor  r)</mrow>
					</md>
					2番目の式は数の分配法則とは異なるので、注意が必要である。
				</statement>
			</theorem>

			<p>さらに命題については、次のde Morganの法則が成り立つ。</p>
			<theorem>
				<title>de Morganの法則</title>
				<statement>
					<m>p, q</m>が命題のとき、次の等式が成り立つ。
					<md>
						<mrow>\overline{p \land q} &amp; = \overline{p} \lor  \overline{q}</mrow>
						<mrow>\overline{p \lor  q} &amp; = \overline{p} \land \overline{q}</mrow>
					</md>
				</statement>
				<proof>真理値表を用いて示す。</proof>
			</theorem>
		</subsection>

		<subsection xml:id="ssec-logic-inference">
			<title>推論「ならば」</title>
			<p>命題を用いてより高度な命題を表すには、次の<dfn en="inference">推論</dfn>を表す規則が必要となる。</p>
			<definition>
				<title>推論</title>
				<statement>
					<m>p, q</m>を命題とするとき、「<em>もし<m>p</m>が成り立つならば、<m>q</m>も成り立つ</em>」という命題を「<m>p</m><dfn>ならば</dfn><m>q</m>」といい、<m>p \implies q</m>と表す。
					命題<m>p \implies q</m>は、「<strong><m>p</m>が偽</strong>のとき」か「<m>p</m>も<m>q</m>も真のとき」に真となる。
					<md>
						<mrow>[ p \implies q ] = [ \overline{p} \lor (p \land q) ] = [ (\overline{p} \lor p) \land (\overline{p} \lor q)] (\text{分配法則}) = [ \overline{p} \lor q ] (\text{排中律})</mrow>
					</md>
					命題<m>p \implies q</m>について、<m>p</m>を<m>p \implies q</m>の<dfn>仮定</dfn>、<m>q</m>を<m>p \implies q</m>の<dfn>結論</dfn>という。
					また、<m>q</m>を<m>p</m>の<dfn en="necessary condition">必要条件</dfn>、<m>p</m>を<m>q</m>の<dfn en="sufficient condition">十分条件</dfn>という。
				</statement>
			</definition>
			<p>必要条件と十分条件は、「<m>p \implies q</m>」の「<m>\implies</m>」を矢に見立てて、「矢の先は必要」と覚えるとよい。</p>

			<example>
				<title>推論の例</title>
				<statement>
					「宝くじに当たったら家を買う」という命題では、命題「宝くじに当たる」が仮定、命題「家を買う」が結論である。
					この命題の真偽について考えると、宝くじに当たった場合には、家を買った場合には真、そうでなければ偽となる。
					一方、宝くじに当たらなかった場合には、家を買おうと買うまいと、この命題では何も言っていないので、偽だとは言えず真となる。
				</statement>
			</example>
		</subsection>

		<subsection xml:id="ssec-logic-eq">
			<title>同値</title>
			<p>この推論規則を用いて、2つの命題が「同じ」であるという関係を定義する。</p>
			<definition>
				<title>同値</title>
				<statement>
					<m>p, q</m>を命題とするとき、<m>p \implies q</m>かつ<m>q \implies p</m>であれば、<m>p</m>と<m>q</m>は<dfn>同値</dfn>であるといい、<m>p \iff q</m>と表す。
					<md>
						<mrow>[ p \iff q ] = [ p \implies q ] \land [ q \implies p ]</mrow>
					</md>
					このとき、<m>q</m>を<m>p</m>の<dfn>必要十分条件</dfn>であるといい、<m>p</m>も<m>q</m>の必要十分条件であるという。
				</statement>
			</definition>
			<p>同値の記号「<m>\iff</m>」は数の比較に用いる等号「<m>=</m>」と同様の記号で、2つの命題が「同じ」ことを表せる便利な記号である。
			ただし「<m>\iff</m>」を使う際は、「<m>\implies</m>」方向だけでなく「<m>\impliedby</m>」方向についても命題が成り立っていることを確認する必要がある。
			「<m>\impliedby</m>」方向が成り立つと言い切れない場合には、「<m>\implies</m>」記号を使うべきである。</p>
		</subsection>

		<subsection xml:id="ssec-logic-contra">
			<title>逆・裏・対偶</title>

			<p>更に、推論を用いた命題について、逆や裏、対偶を定義できる。</p>
			<definition>
				<title>逆・裏・対偶</title>
				<statement>
					<m>p, q</m>を命題とするとき、命題<m>p \implies q</m>に対し、<m>q \implies p</m>を元の命題の<dfn>逆</dfn>、<m>\overline{p} \implies \overline{q}</m>を元の命題の<dfn>裏</dfn>、<m>\overline{q} \implies \overline{p}</m>を元の命題の<dfn>対偶</dfn>という。
				</statement>
			</definition>

			<p>このうち、命題<m>p \implies q</m>と逆<m>q \implies p</m>について、前者は<m>\overline{p} \lor q</m>、後者は<m>\overline{q} \lor p</m>であるので、<strong>命題とその逆の真偽は一致しない</strong>。
			また、命題<m>p \implies q</m>と対偶<m>\overline{q} \implies \overline{p}</m>については、次の定理が成り立つ。</p>
			<theorem>
				<title>命題とその対偶</title>
				<statement>
					命題とその対偶の真偽は一致する。つまり、<m>p, q</m>を命題とするとき、
					<md>
						<mrow>[ \overline{q} \implies \overline{p} ] = [ p \implies q ]</mrow>
					</md>
				</statement>
				<proof>
					<md>
						<mrow>[ \overline{q} \implies \overline{p} ] = [\overline{\overline{q}} \lor \overline{p}] = [ q \lor \overline{p}] = [ \overline{p} \lor q] = [ p \implies q ]</mrow>
					</md>
				</proof>
			</theorem>
		</subsection>
	</section>

	<section xml:id="sec-logic-set">
		<title>集合</title>
		<subsection xml:id="ssec-logic-set">
			<title>集合と要素</title>
			<p>複雑な思考を行うには、いろいろなものを個別に考えるのではなく、共通する性質を取り上げてひとまとめにして、抽象的に考える必要がある。
			数学において、複数のものをまとめて表すための最も基本的な道具が、ここで述べる集合である。</p>
			<definition>
				<title>集合</title>
				<statement>
					「あるものがそれに<em>属するかどうかが明確に定まっている</em>ものの<em>集まり</em>」のことを<dfn en="set">集合</dfn>という。
				</statement>
			</definition>

			<p>集合についてもっとも基本的な関係は、集合とそれに含まれる「もの」の関係である。</p>
			<definition>
				<title>要素</title>
				<statement>
					集合に含まれる「もの」をその集合の<dfn en="element">要素</dfn>という。
					集合の表し方には、次の2つがある。
					<ul>
						<li><dfn en="intensive">内包</dfn>的な表現: 条件<m>P(x)</m>を満たす<m>x</m>の集合を<m>\{x|P(x)\}</m>のように、集合に含まれる要素が満たす条件を記して表す。</li>
						<li><dfn en="extensive">外延</dfn>的な表現: <m>\{0,1,2\}</m>のように、0,1,2からなる集合の要素を直接書き並べて表す。</li>
					</ul>
					集合<m>A</m>に要素<m>x</m>が含まれることを、<m>x \in A</m>と表す。
					また、「空の集合」<m>\{\}</m>を<dfn en="empty set">空集合</dfn>といい、<m>\emptyset</m>で表す。
					空集合の記号<m>\emptyset</m>は丸またはゼロに斜線を引いた記号で、ギリシャ文字の<ruby r="ファイ">Φ</ruby>とは異なる。
				</statement>
			</definition>
		</subsection>

		<subsection xml:id="ssec-logic-subset">
			<title>部分集合</title>
			<p>集合に含まれる要素については、「要素が集合に含まれる」という<ruby r="ほうがん">包含</ruby>関係を定義することができる。</p>
			<definition>
				<title>部分集合</title>
				<statement>
					集合<m>A, B</m>について、<m>x \in A</m>のときに<m>x \in B</m>となるなら、<m>A</m>は<m>B</m>の<dfn en="subset">部分集合</dfn>であるといい、<m>A \subset B</m>や<m>B \supset A</m>と表す。
					特に、<m>A \subset B</m>かつ<m>A \supset B</m>であることを、<m>A = B</m>と表す。
				</statement>
			</definition>
			<p>部分集合の記号<m>\subset, \supset</m>については、定義より集合<m>A</m>について<m>A \subset A</m>が常に成り立つ。
			よく似た記号の不等号<m>&lt;, &gt;</m>では、数<m>A</m>について<m>A &lt; A</m>が成り立たないので、違いを理解しておく必要がある。</p>
			<p>この定義で、「二つの集合<m>A</m>と<m>B</m>が等しい」ということが、集合の包含関係によって定義されている。
			この定義により、<m>A = B</m>を証明したい場合には、<m>A \subset B</m>かつ<m>A \supset B</m>であることを示せば良いということが分かる。
			これは、<m>A = B</m>を示すための有力な手がかりとなり、証明においても用いられることがある。</p>

			<example>
				<title>集合の例</title>
				<statement>
					<md>
						<mrow>A &amp; = \{2, 4, 6, \cdots\}</mrow>
						<mrow>B &amp; = \{\text{いちご}, \text{ぶどう}, \text{メロン}\}</mrow>
						<mrow>C &amp; = \{n|n=1, 2, 3, \cdots\} = \{1, 2, 3, \cdots\}</mrow>
						<mrow>D &amp; = \{2n|n=1, 2, 3, \cdots\} = \{2, 4, 6, \cdots\} = A</mrow>
					</md>
				</statement>
			</example>
			<p>この例では<m>\cdots</m>という省略記号を用いたが、このような書き方は曖昧さを含む。
			例の集合<m>A</m>は<m>2, 4, 6</m>を要素に含むことが分かるが、この3つの要素から連想される条件が「正の偶数」であるのか、「2つの要素の和」であるのかが明らかでない。
			前者であれば<m>8 \in A</m>であるが、後者であれば6の次に小さい要素は<m>4 + 6 = 10</m>となり、8は含まないことになる。
			このような推測を他者に要請することは客観性の観点から適切でないため、できる限り<em>省略記号を使う書き方は避ける</em>ことが望ましい。</p>
		</subsection>

		<subsection xml:id="ssec-logic-complement">
			<title>補集合・和集合・共通部分</title>
			<p>何らかの形で「全体」の集合(<dfn>全体集合</dfn>)が決まっているときには、全体のうちである条件を満たさないものの集合を考えることができる。</p>
			<definition>
				<title>補集合</title>
				<statement>
					全体集合を<m>B</m>とし、<m>A</m>を<m>B</m>の部分集合とする。
					<m>B</m>の元のうち<m>A</m>の元ではないものを<m>A</m>の<dfn en="complement">補集合</dfn>といい、次のように定義される。
					<md>
						<mrow>\overline{A} = \{x \in B | x \notin A \}</mrow>
					</md>
					<m>A</m>の補集合を表す記号としては、<m>\overline{A}</m>以外にも<m>A^c</m>がよく用いられる。
				</statement>
			</definition>
			<p>補集合の記号<m>\overline{A}</m>には全体集合が<m>B</m>であることは明示されていないが、<m>B</m>にあたる全体集合がどのようなものであるかにより<m>\overline{A}</m>の要素が変わることには、注意が必要である。
			<m>A</m>が正の偶数の集合であるとき、<m>B</m>が自然数の集合であれば<m>\overline{A}</m>は正の奇数の集合となるが、<m>B</m>が実数の集合であれば<m>\overline{A}</m>は正の奇数だけでなく、有理数や無理数も含むことになる。
			そのため、<em>補集合を用いる場合は、何が全体集合であるかを予め定めておく</em>必要がある。</p>

			<p>通常の数に対して四則演算が定義できるように、集合に対しても同様の演算を定義することができる。</p>
			<definition>
				<title>和集合・共通部分</title>
				<statement>
					<m>A, B</m>が集合のとき、次の集合をそれぞれ、<m>A</m>と<m>B</m>の<dfn en="union">和集合</dfn>、<m>A</m>と<m>B</m>の<dfn en="intersection">共通部分</dfn>という。
					<md>
						<mrow>A \cup B &amp; = \{x| x \in A \text{かつ}   x \in    B\}</mrow>
						<mrow>A \cap B &amp; = \{x| x \in A \text{または} x \in    B\}</mrow>
					</md>
				</statement>
			</definition>
			<p>数学における「または」は、「どちらか一方が成り立つ」という意味ではなく「	<em>少なくとも一方</em>が成り立つ」という意味であることに注意が必要である。</p>
		</subsection>

		<subsection xml:id="ssec-logic-law">
			<title>集合に関する計算法則</title>
			<p>和集合や共通部分、補集合については、次のような等式が成り立つ。</p>
			<theorem>
				<title>集合に関する計算法則</title>
				<statement>
					<m>A, B, C</m>が集合のとき、次の等式が成り立つ。
					<md>
						<mrow>A \cup B &amp;= B \cup A &amp; (\text{交換法則})</mrow>
						<mrow>A \cap B &amp;= B \cap A &amp; (\text{交換法則})</mrow>
						<mrow>(A \cup B) \cup C &amp;= A \cup (B \cup C) &amp; (\text{結合法則})</mrow>
						<mrow>(A \cap B) \cap C &amp;= A \cap (B \cap C) &amp; (\text{結合法則})</mrow>
					</md>
				</statement>
			</theorem>

			<p>集合に関する分配法則も成り立つ。</p>
			<theorem>
				<title>集合に関する分配法則</title>
				<statement>
					<m>A, B, C</m>が集合のとき、次の等式が成り立つ。
					<md>
						<mrow>(A \cup B) \cap C = (A \cap C) \cup (B \cap C)</mrow>
						<mrow>(A \cap B) \cup C = (A \cup C) \cap (B \cup C)</mrow>
					</md>
					2番目の式は数の分配法則とは異なるので、注意が必要である。
				</statement>
			</theorem>

			<p>補集合と和集合、共通部分の間には、次のde Morganの法則が成り立つ。</p>
			<theorem>
				<title>de Morganの法則</title>
				<statement>
					<m>A, B, C</m>が集合のとき、次の等式が成り立つ。
					<md>
						<mrow>\overline{A \cup B} &amp; = \overline{A} \cap \overline{B}</mrow>
						<mrow>\overline{A \cap B} &amp; = \overline{A} \cup \overline{B}</mrow>
						<mrow>\overline{A \cup B \cup C} &amp; = \overline{A} \cap \overline{B} \cap \overline{C}</mrow>
						<mrow>\overline{A \cap B \cap C} &amp; = \overline{A} \cup \overline{B} \cup \overline{C}</mrow>
					</md>
				</statement>
				<proof>
					<md>
						<mrow>x \in \overline{A \cup B} &amp;
							\iff x \notin A \cup B
							\iff x \notin A \text{かつ} x \notin B
							\iff x \in \overline{A} \text{かつ} x \in \overline{B}
							\iff x \in \overline{A} \cap \overline{B}</mrow>
						<mrow>x \in \overline{A \cap B} &amp;
							\iff x \notin A \cap B
							\iff x \notin A \text{または} x \notin B
							\iff x \in \overline{A} \text{または} x \in \overline{B}
							\iff x \in \overline{A} \cup \overline{B}</mrow>
						<mrow>\overline{A \cup B \cup C} &amp;= \overline{A \cup (B \cup C)} = \overline{A} \cap \overline{B \cup C} = \overline{A} \cap (\overline{B} \cap \overline{C}) = \overline{A} \cap \overline{B} \cap \overline{C}</mrow>
						</md>
				</proof>
			</theorem>
		</subsection>

		<subsection xml:id="ssec-logic-number">
			<title>数</title>
			<p>集合の例としては、まず自然数や実数など、特定の条件を満たす数全体がある。</p>
			<definition>
				<title>自然数と整数</title>
				<statement>
					<dfn en="natural number">自然数</dfn>全体の集合を<m>\mathbb{N}</m>、<dfn en="integer">整数</dfn>全体の集合を<m>\mathbb{Z}</m>で表す。
					<md>
						<mrow>\mathbb{N} &amp;= \{n | n = 1, 2, \cdots \}</mrow>
						<mrow>\mathbb{Z} &amp;= \{0\} \cup \{\pm n | n \in \mathbb{N} \}</mrow>
					</md>
				</statement>
			</definition>
			<p>整数の集合を<m>\mathbb{Z}</m>で表すのは、ドイツ語のZahlen(数)に由来する。
			また自然数については、現代では<m>0 \in \mathbb{N}</m>とすることも多い。</p>

			<definition>
				<title>有理数と実数</title>
				<statement>
					<em>分数(比)の形で表すことができる数</em>、つまり有限小数や循環小数を<dfn en="rational number">有理数</dfn>といい、有理数全体の集合を<m>\mathbb{Q}</m>で表す。
					<md>
						<mrow>\mathbb{Q} &amp;= \{\frac{n}{m} | n \in \mathbb{N}, m \in \mathbb{Z} \}</mrow>
					</md>
					<m>\pi = 3.14\cdots</m>や<m>\sqrt{2} = 1.414\cdots</m>などの無限小数は分数で表すことができず、これを<dfn>無理数</dfn>という。
					有理数と無理数を合わせて<dfn en="real number">実数</dfn>といい、実数全体の集合を<m>\mathbb{R}</m>で表す。
				</statement>
			</definition>
			<p>有理数を<m>\mathbb{Q}</m>で表すのは「商」の意を表すquotientに由来する。有理数は英語を直訳すると「比で表される数」であり、この言い方の方が定義をより明瞭に表している。</p>
		</subsection>
	</section>

	<section xml:id="sec-logic-pred">
		<title>述語論理</title>
		<introduction>
			<p>命題論理を拡張し、「すべて」「ある」などを扱えるようにした枠組みを<dfn en="predicate logic">述語論理</dfn>という。</p>
		</introduction>
		<subsection xml:id="ssec-logic-propfunc">
			<title>命題関数</title>
			<p>命題論理では、文を命題という単位で扱い、命題を組み合わせてより複雑な命題を表した。
			命題には、「2は自然数である」「3は自然数である」「4は自然数である」のように、大半が同じで一部分のみが異なる命題がある。
			これらの命題をまとめて表すために、<dfn en="propositional function">命題関数</dfn>を定義する。</p>
			<definition>
				<title>命題関数</title>
				<statement>
					変数<m>x</m>に値を代入すれば命題になり真偽が定まるものを<dfn en="propositional function">命題関数</dfn>といい、<m>P</m>という名前をつけた命題関数を<m>P(x)</m>のように表す。
					2つの変数<m>x, y</m>に値を代入すれば真偽が定まる命題関数についても同様に、<m>P(x, y)</m>のように表す。
				</statement>
			</definition>

			<example>
				<title>命題関数の例</title>
				<statement>
					<m>P(x)</m>を「<m>x</m>は自然数である」とすると、<m>P(1)</m>は「1は自然数である」、<m>P(2)</m>は「2は自然数である」、<m>P(2.5)</m>は「2.5は自然数である」となり、いずれも命題である。
					このうち、<m>P(1), P(2)</m>は真、<m>P(2.5)</m>は偽である。
					また、<m>Q(x, y)</m>を「<m>x + y</m>は自然数である」とすると、<m>Q(1, 2)</m>は「<m>1 + 2</m>は自然数である」となり、命題である。
					<m>Q(1, 2), Q(2, 0)</m>は真、<m>Q(2, 0.5), Q(-3, 1)</m>は偽である。
					<m>P(x), Q(x, y)</m>を数式で表すと、次のようになる。
					<md>
						<mrow>P(x)    &amp; = \begin{cases} T &amp; (x     \in \mathbb{N}) \\ F &amp; (\text{otherwise}) \end{cases}</mrow>
						<mrow>Q(x, y) &amp; = \begin{cases} T &amp; (x + y \in \mathbb{N}) \\ F &amp; (\text{otherwise}) \end{cases}</mrow>
					</md>
				</statement>
			</example>
			<p>命題関数を用いると、命題関数<m>P(x)</m>が真になる<m>x</m>の集合は、内包的な表記で<m>\{ x | P(x) \}</m>と表せる。</p>
		</subsection>

		<subsection xml:id="ssec-logic-allexist">
			<title>「すべて」「ある」</title>
			<p>命題には、「2は整数である」のように具体的な数についての命題もあれば、「自然数は整数である」のように、数の集合についての命題もある。
			「自然数は整数である」という命題は、自然数という集合の要素を書き並べると、「1は整数である」かつ「2は整数である」かつ「3は整数である」かつ…となり、「<m>x</m>は整数である」という形の文を「かつ」でつなげた命題と同値だといえる。
			<m>P(x)</m>を「<m>x</m>は整数である」とすると、次のように表せる。</p>
			<md>
				<mrow>\text{自然数は整数} &amp;= 1\text{は整数} \land 2\text{は整数} \land 3\text{は整数} \land \cdots</mrow>
				<mrow>&amp;= P(1) \land P(2) \land P(3) \land \cdots = \bigwedge_{x \in \mathbb{N}} P(x)</mrow>
			</md>
			<p>この命題は、自然数<m>x</m>について<m>P(x)</m>が常に成り立つときに真、そうでないときに偽となる。</p>
			<definition>
				<title>「すべて」</title>
				<statement>
					集合<m>X</m>の<dfn en="all">すべて</dfn>の要素<m>x</m>について<m>P(x)</m>が真であるという命題を<m>\forall x \in X, P(x)</m>と表す。
					この記号<m>\forall</m>は<dfn>全称量化子</dfn>といい、「for <em>a</em>ll」または「<em>a</em>ny」の頭文字である「A」を逆さにした記号である。
					<md>
						<mrow>\forall x \in X, P(x) \iff \bigwedge_{x \in X} P(x)</mrow>
					</md>
					<m>\forall x \in X</m>は、「集合<m>X</m>の<dfn en="any">任意</dfn>の要素<m>x</m>について」「集合<m>X</m>の<dfn>どの</dfn>要素<m>x</m>についても」などともいう。
				</statement>
			</definition>

			<p>「すべて」が「かつ」に対応していると考えたとき、次のように文を「または」でつなげた命題を考えることができる。
			「<m>x</m>は整数である」という形の文を「または」でつなげた命題は、次のように表せる。</p>
			<md>
				<mrow>P(1) \lor P(2) \lor P(3) \lor \cdots = \bigvee_{x \in \mathbb{N}} P(x)</mrow>
			</md>
			<p>この命題は、自然数のうちに<m>P(x)</m>が成り立つ<m>x</m>が存在するときに真、そうでないときに偽となる。</p>
			<definition>
				<title>「ある」</title>
				<statement>
					集合<m>X</m>の<dfn en="some">ある</dfn>要素<m>x</m>について<m>P(x)</m>が真であるという命題を<m>\exists x \in X, P(x)</m>と表す。
					この記号<m>\exists</m>は<dfn>存在量化子</dfn>といい、「<em>e</em>xist」の頭文字である「E」を逆さにした記号である。
					<md>
						<mrow>\exists x \in X, P(x) \iff \bigvee_{x \in X} P(x)</mrow>
					</md>
					<m>\exists x \in X</m>は、「集合<m>X</m>の<dfn>少なくとも1つ</dfn>の要素<m>x</m>について」「集合<m>X</m>の<dfn>いずれか</dfn>の要素<m>x</m>について」「〜が成り立つ集合<m>X</m>の要素<m>x</m>が<dfn en="exist">存在</dfn>する」ともいう。
				</statement>
			</definition>
		</subsection>

		<subsection xml:id="ssec-logic-duality">
			<title>「すべて」「ある」の否定</title>
			<p>「すべて」と「ある」を含む命題は、一方が他方の否定になるという関係がある。これは、英語における「any」と「some」の関係と同様である。</p>
			<p>命題「<em>すべて</em>の<m>x</m>について<m>P(x)</m>が<em>成り立つ</em>(<m>\forall x \in X, P(x)</m>)」の否定は「<em>ある</em><m>x</m>について<m>P(x)</m>が<em>成り立たない</em>(<m>\exists x \in X, \overline{P(x)}</m>)」(<dfn>部分否定</dfn>)であり、「すべての<m>x</m>について<m>P(x)</m>が成り立たない(<m>\forall x \in X, \overline{P(x)}</m>)」(<dfn>全否定</dfn>)ではないことに注意が必要である。
			また、命題「<em>ある</em><m>x</m>について<m>P(x)</m>が<em>成り立つ</em>(<m>\exists x \in X, P(x)</m>)」の否定は「<em>すべて</em>の<m>x</m>について<m>P(x)</m>が<em>成り立たない</em>(<m>\forall x \in X, \overline{P(x)}</m>)」であり、「ある<m>x</m>について<m>P(x)</m>が成り立たない(<m>\exists x \in X, \overline{P(x)}</m>)」ではない。</p>
			<theorem>
				<title>「すべて」「ある」の否定(de Morganの法則)</title>
				<statement>
					<m>X</m>を集合、<m>P</m>を命題関数とすると、次の等式が成り立つ。
					<md>
						<mrow>\overline{\forall x \in X, P(x)} = \exists x \in X, \overline{P(x)}</mrow>
						<mrow>\overline{\exists x \in X, P(x)} = \forall x \in X, \overline{P(x)}</mrow>
					</md>
				</statement>
				<proof>
					<md>
						<mrow>\overline{\forall x \in X, P(x)} &amp;= \overline{\bigwedge_{x \in X} P(x)}</mrow>
						<mrow>&amp;= \bigvee_{  x \in X} \overline{P(x)} (\text{de Morganの法則})</mrow>
						<mrow>&amp;= \exists x \in X, \overline{P(x)}</mrow>
						<mrow>\overline{\exists x \in X, P(x)} &amp;= \overline{\bigvee_{  x \in X} P(x)}</mrow>
						<mrow>&amp;= \bigwedge_{x \in X} \overline{P(x)} (\text{de Morganの法則})</mrow>
						<mrow>&amp;= \forall x \in X, \overline{P(x)}</mrow>
					</md>
				</proof>
			</theorem>
			<p>この関係は、命題論理におけるde Morganの法則に対応している。
			ただし、集合<m>X</m>の要素が有限個ではない(無限集合である)場合には、de Morganの法則が成り立つかどうかは明らかではない。
			そのため、<strong>述語論理におけるde Morganの法則は定理ではなく公理として扱い、de Morganの法則が成り立つという前提で議論する</strong>ことが多い。</p>
		</subsection>
	</section>

	<section xml:id="sec-logic-mode">
		<title>様相論理</title>
		<introduction>
			<p>述語論理の特別な例として、事象のあり方や捉え方を扱う<dfn en="modal logic">様相論理</dfn>がある。</p>
		</introduction>

		<subsection xml:id="ssec-logic-modal">
			<title>「必ず」「ありうる」</title>
			<p>これまで扱った命題と同様に、「必ず〜となる」「〜となることがありうる」という文も、真偽が確定するので命題だといえる。
			様相論理は、このような必然性や可能性についてのいろいろな命題を扱うための論理である。</p>
			<definition>
				<title>「必ず」「ありうる」</title>
				<statement>
					命題<m>P</m>に対して、「<m>P</m>が成り立つことが<dfn en="necessary">必然</dfn>である」「必ず<m>P</m>となる」という命題を<m>\Box P</m>と表す。
					また、「<m>P</m>が成り立つことが<dfn en="possible">可能</dfn>である」「<m>P</m>となりうる」という命題を<m>\Diamond P</m>と表す。
				</statement>
			</definition>
		</subsection>

		<subsection xml:id="ssec-logic-world">
			<title>可能世界</title>
			<p><m>\Box P</m>や<m>\Diamond P</m>は、次に定義する<dfn en="possible world">可能世界</dfn>の考え方を用いると、述語論理の記号で表せる。</p>
			<p>将棋や囲碁のようなゲームでは、対局の途中のある盤面について、駒を進めたり置いたりすることで、次の盤面に進む。
			多くの場合、駒の進め方や置き方は複数ありうるので、「次の盤面」も複数ありうる。
			このときの「今の盤面」と「次の盤面」のように「現在の世界」と「次の時点の世界」を考え、「ありうる世界の集合」を定義したときの要素を可能世界と呼ぶ。</p>
			<definition>
				<title>可能世界を用いた「必ず」「ありうる」の表現</title>
				<statement>
					可能世界の集合を<m>W</m>、可能世界<m>w</m>で事象<m>P</m>が成り立つかどうかを命題関数<m>P(w)</m>で表すとき、次のように<m>\Box P, \Diamond P</m>を定義できる。
					<md>
						<mrow>\Box     P &amp;\iff \forall w \in W, P(w)</mrow>
						<mrow>\Diamond P &amp;\iff \exists w \in W, P(w)</mrow>
					</md>
					つまり、<m>\Box P</m>は「<strong>すべての可能世界</strong>で<m>P</m>が成り立つ」こと、<m>\Diamond P</m>は「<strong>ある可能世界</strong>で<m>P</m>が成り立つ」こととして定義できる。
				</statement>
			</definition>
		</subsection>

		<subsection xml:id="ssec-logic-modedual">
			<title>「必ず」「ありうる」の否定</title>
			<p>可能世界の考え方と述語論理の記号を用いると、「必ず」「ありうる」を含む命題の否定を定義できる。
			この関係は、de Morganの法則に対応している。</p>
			<theorem>
				<title>「必ず」「ありうる」の否定(de Morganの法則)</title>
				<statement>
					可能世界の集合を<m>W</m>、可能世界<m>w</m>で事象<m>P</m>が成り立つかどうかを命題関数<m>P(w)</m>で表すとき、次の同値関係が成り立つ。
					<md>
						<mrow>\overline{\Box     P} &amp;\iff \Diamond \overline{P}</mrow>
						<mrow>\overline{\Diamond P} &amp;\iff \Box     \overline{P}</mrow>
					</md>
					つまり、「必ず<m>P</m>となる」の否定は「<m>P</m>が成り立たないことがありうる」、「<m>P</m>となりうる」の否定は「必ず<m>P</m>とならない」である。
				</statement>
				<proof>
					<md>
						<mrow>\overline{\Box     P} \iff \overline{\forall w \in W, P(w)} \iff [\exists w \in W, \overline{P(w)}] \iff \Diamond \overline{P}</mrow>
						<mrow>\overline{\Diamond P} \iff \overline{\exists w \in W, P(w)} \iff [\forall w \in W, \overline{P(w)}] \iff \Box     \overline{P}</mrow>
					</md>
				</proof>
			</theorem>
		</subsection>

		<subsection xml:id="ssec-logic-mode">
			<title>さまざまな様相論理</title>
			<p>様相論理では、可能世界の集合<m>W</m>の定義を変えることで、「必ず」「ありうる」以外にも、さまざまな事象のあり方や捉え方を扱うことが可能である。
			ここでは、そのような<dfn en="mode">様相</dfn>のいくつかを紹介する。義務を扱う論理は<dfn>義務論理</dfn>、時間を扱う論理は<dfn>時相論理</dfn>と呼ばれる。</p>
			<table xml:id="table-logic-mode">
				<caption>様相の例</caption>
				<tbody>
					<tr><th>対象</th><th><m>W</m>の要素</th><th><m>\Box P</m>の定義</th><th><m>\Diamond P</m>の定義</th></tr>
					<tr><th>可能性</th><td><strong>可能な世界</strong></td><td>「<m>P</m>が成り立つことは<strong>必然</strong>である(<strong>必ず</strong>)」</td><td>「<m>P</m>が成り立つことが<strong>可能</strong>である(<strong>ありうる</strong>)」</td></tr>
					<tr><th>義務</th><td><strong>「よい」世界</strong></td><td>「<m>P</m>をする<strong>義務</strong>がある(<dfn en="must">しなければならない</dfn>)」</td><td>「<m>P</m>をする<strong>許可</strong>がある(<dfn en="may">してもよい</dfn>)」</td></tr>
					<tr><th>場所</th><td><strong>場所</strong></td><td>「どの<strong>場所</strong>でも(<dfn en="anywhere">どこでも</dfn>)<m>P</m>が成り立つ」</td><td>「ある<strong>場所</strong>で(<dfn en="somewhere">どこかで</dfn>)<m>P</m>が成り立つ」</td></tr>
					<tr><th>時間</th><td><strong>時点</strong></td><td>「どの<strong>時点</strong>でも(<dfn en="anytime">いつでも</dfn>)<m>P</m>が成り立つ」</td><td>「ある<strong>時点</strong>で(<dfn en="sometime">ときには</dfn>)<m>P</m>が成り立つ」</td></tr>
					<tr><th>未来</th><td><strong>現在より後の時点</strong></td><td>「どの<strong>未来</strong>でも<m>P</m>が成り立つ」</td><td>「ある<strong>未来</strong>で<m>P</m>が成り立つ」</td></tr>
					<tr><th>過去</th><td><strong>現在より前の時点</strong></td><td>「どの<strong>過去</strong>でも<m>P</m>が成り立つ」</td><td>「ある<strong>過去</strong>で<m>P</m>が成り立つ」</td></tr>
				</tbody>
			</table>
		</subsection>
	</section>

	<section xml:id="sec-logic-infer">
		<title>推論</title>
		<introduction>
			<p>いくつかの命題から一つの命題を導くことを<dfn en="inference">推論</dfn>という。
			推論には次に示す複数の方法があり、推論で導かれた命題がどの程度正しいかという<em>厳密性</em>の高さと、推論で導かれた命題がどの程度元の命題にないことを述べているかという<em>拡張性</em>の高さが、それぞれ異なる。
			代表的な推論法には、厳密性の高い順に演繹・帰納・アブダクションがある。
			このうち、演繹とアブダクションに対応する思考法が、de Bonoの垂直思考と水平思考である。</p>
			<p><ruby r="トゥールミン">Toulmin</ruby>は、<em>前提</em>、<em>規則</em>、<em>結論</em>という3つの命題が存在し、前提に規則を適用すると結論が得られるとした<xref ref="bib-toulmin"/>。
			この「三角ロジック」と呼ばれる形式に従えば、演繹・帰納・アブダクションの3つの推論法は、図<xref ref="fig-logic-inference"/>のように対比できる。
			図中の点と矢印は命題を表し、「<m>A \implies B</m>」を前提、「<m>B \implies C</m>」を規則、「<m>A \implies C</m>」は結論とする。
			また、それぞれの推論法で与えられている命題を実線で、推論により導かれる命題を点線で示す。</p>
			<figure xml:id="fig-logic-inference">
				<image source="image/logic-inference"/>
				<caption>推論の方法</caption>
			</figure>
			<p>図<xref ref="fig-logic-inference"/>の例では、<m>A</m>を「<m>x</m>はソクラテスである」、<m>B</m>を「<m>x</m>は人である」、<m>C</m>を「<m>x</m>は死ぬ」としている。
			このとき、前提(<m>A \implies B</m>)は「ソクラテスは人である(<m>x: \text{ソクラテス} \implies x: \text{人}</m>)」、規則(<m>B \implies C</m>)は「人は死ぬ(<m>x: \text{人} \implies x: \text{死ぬ}</m>)」、結論(<m>A \implies C</m>)は「ソクラテスは死ぬ(<m>x: \text{ソクラテス} \implies x: \text{死ぬ}</m>)」となる。</p>
			<definition>
				<title>演繹・帰納・アブダクション</title>
				<statement>
					<ul>
						<li><strong>前提と規則</strong>から<strong>結論</strong>を導く推論を<dfn en="deduction"><ruby r="えんえき">演繹</ruby></dfn>という。</li>
						<li><strong>前提と結論</strong>から<strong>規則</strong>を導く推論を<dfn en="induction"><ruby r="きのう">帰納</ruby></dfn>という。</li>
						<li><strong>規則と結論</strong>から<strong>前提</strong>を導く推論を<dfn en="abduction">アブダクション</dfn>という。</li>
					</ul>
				</statement>
			</definition>
		</introduction>

		<subsection xml:id="ssec-logic-infer-deduction">
			<title>演繹</title>
			<p><dfn en="deduction"><ruby r="えんえき">演繹</ruby></dfn>は、前提と規則から結論を導く推論である。
			図<xref ref="fig-logic-inference"/>の例では、「ソクラテスは人である」という前提と、「人は死ぬ」という規則が与えられたときに、「ソクラテスは死ぬ」という<em>結論が真だと推論</em>する。
			Aristotleによる三段論法<xref ref="bib-aristotle-ana"/><xref ref="bib-aristotle-ana-j"/>は演繹の代表的な推論法で、「<m>A \implies B, B \implies C</m>」のとき「<m>A \implies C</m>」が成り立つという推論を行う。</p>
			<p>演繹による推論では、前提と規則の命題が真なら、<strong>推論した結論が真であることが保証</strong>され、<em>高い厳密性</em>をもつ。
			厳密性を重視する数学や論理学では、演繹以外の推論の使用は認められない。
			一方、演繹では<strong>前提に含意される以上の結論を導くことはできない</strong>ため、<em>拡張性はない</em>。</p>
		</subsection>

		<subsection xml:id="ssec-logic-infer-induction">
			<title>帰納</title>
			<p><dfn en="induction"><ruby r="きのう">帰納</ruby></dfn>は、前提と結論から規則を導く推論である。
			図<xref ref="fig-logic-inference"/>の例では、「ソクラテスは人である」「プラトンは人である」「ゼノンは人である」という前提と、「ソクラテスは死ぬ」「プラトンは死ぬ」「ゼノンは死ぬ」という結論が与えられたときに、「人は死ぬ」という<em>規則が真だと推論</em>する<xref ref="bib-aristotle-ana2"/><xref ref="bib-aristotle-ana-j2"/><xref ref="bib-bacon"/>。
			<em>経験則</em>や<dfn en="heuristics">ヒューリスティクス</dfn>は、帰納による推論の例である。</p>
			<p>帰納による推論では、前提と結論が真でも、<strong>推論した規則が真であることは保証されない</strong>ため、<em>厳密性は十分でない</em>。
			この例の場合、例えば「エピクロス」という「死なない人」の例(<em>反例</em>)がある可能性は否定できない。
			一方、帰納では前提に含まれる個々の事例を<em>一般化</em>でき、前提の内容以上の規則を得る可能性があるため、<em>一定の拡張性</em>をもつ。</p>
		</subsection>

		<subsection xml:id="ssec-logic-infer-abduction">
			<title>アブダクション</title>
			<p><dfn en="abduction">アブダクション</dfn>は、規則と結論から前提を導く推論である。
			図<xref ref="fig-logic-inference"/>の例では、「ソクラテスは死ぬ」という結論と「人は死ぬ」という規則が与えられたときに、「ソクラテスは人である」という<em>前提が真だと推論</em>する。
			アブダクションに類似する手法はAristotle<xref ref="bib-aristotle-ana2"/><xref ref="bib-aristotle-ana-j2"/>も言及しているが、近代的な提唱を行ったのは<ruby r="パース">Peirce</ruby>である<xref ref="bib-yonemori"/>。</p>
			<p>アブダクションによる推論では、結論と規則が真でも、<strong>推論した前提が真であることは保証されない</strong>。
			この例の場合、死んだ「ソクラテス」は人ではなく、ネコやイヌなどの人以外の動物である可能性もある。</p>
			<p>アブダクションによる推論は<em>高い拡張性</em>をもつ一方、帰納よりも<em>厳密性に乏しく</em>、このままでは命題の正しさを示すのは難しい。
			そこで、アブダクションで得られた命題を<em>仮説</em>として、演繹により仮説の正しさを示し、帰納により実例で仮説の正しさを裏付けることがよく行われる。
			アブダクションが果たす仮説形成の役割は、Russellが<q>仮説を形成することが科学的な仕事のなかでもっとも難しいのであり、偉大な能力が不可欠となる</q><xref ref="bib-russell"/>というように、科学において極めて重要である。</p>
		</subsection>
	</section>

	<section xml:id="sec-logic-proof">
		<title>証明</title>
		<introduction>
			<p><strong>演繹による推論</strong>を続けて、命題の真偽を明らかにすることを<dfn en="proof">証明</dfn>という。
			証明は「命題が真であること」を明らかにする場合が多いが、「命題が偽であること」を明らかにする場合もある。</p>
		</introduction>

		<subsection xml:id="ssec-logic-proof-direct">
			<title>直接法</title>
			<p>示したい命題を直接示す証明方法は、直接法と呼ばれることが多い。
			直接法を用いる場合、前提に対して同値な変形や定理などの規則を繰り返し適用することにより、結論を示すことが多い。
			場合によっては、結論から前提の側に向けて同値な変形を繰り返していくこともある。</p>
		</subsection>

		<subsection xml:id="ssec-logic-proof-counter">
			<title>反例を用いた証明</title>
			<p>命題<m>x \in A \implies x \in B</m>が<strong>偽</strong>である(<m>\overline{x \in A \implies x \in B}</m>)ことを示すには、<dfn en="counterexample">反例</dfn>と呼ばれる命題が成り立たないような具体例を1つ挙げることも多い。
			この場合、反例が1つ見つかりさえすれば、通常の証明に比べて簡単に示すことができる。</p>
			<definition>
				<title>反例</title>
				<statement>
					命題<m>x \in A \implies x \in B</m>に対して、「<m>A</m>の要素だが<m>B</m>の要素でない<m>x</m>(<m>x \in A \land x \notin B</m>)」を、命題<m>x \in A \implies x \in B</m>の<dfn en="counterexample">反例</dfn>という。
				</statement>
			</definition>

			<theorem>
				<title>反例を用いた証明</title>
				<statement>
					命題<m>x \in A \implies x \in B</m>が偽であることを示すには、例を1つ挙げ、その例が「<m>A</m>の要素だが<m>B</m>の要素でない」ことを示せばよい。
				</statement>
				<proof>
					<md>
						<mrow>\overline{x \in A \implies x \in B} = \overline{\overline{x \in A} \lor x \in B} = \overline{\overline{x \in A}} \land \overline{x \in B} = x \in A \land x \not\in B</mrow>
					</md>
				</proof>
			</theorem>
		</subsection>

		<subsection xml:id="ssec-logic-proof-contraposition">
			<title>対偶を用いた証明</title>
			<p>命題<m>p \implies q</m>の真偽を直接示しにくい場合には、元の命題の<strong>対偶</strong><m>\overline{q} \implies \overline{p}</m>をとり、対偶を示して元の命題を示せることがある。</p>
		</subsection>

		<subsection xml:id="ssec-logic-proof-contradiction">
			<title>背理法</title>
			<p>証明したい命題<m>p</m>を直接示すのが難しい場合には、命題<m>p</m>が成り立たない(偽である)と仮定して<dfn en="contradiction">矛盾</dfn>を導く<dfn>背理法</dfn>が用いられることがある。</p>
			<definition>
				<title>矛盾</title>
				<statement>
					<m>p</m>を命題とするとき、命題<m>p \land \overline{p}</m>を<m>p</m>についての<dfn en="contradiction">矛盾</dfn>という。
					命題<m>p \land \overline{p}</m>は常に偽である。
				</statement>
			</definition>

			<theorem>
				<title>背理法</title>
				<statement>
					命題<m>p</m>の真偽と命題<m>\overline{p} \implies \text{F}</m>の真偽は一致する。
				</statement>
				<proof>
					<md>
						<mrow>[ \overline{p} \implies \text{F} ] = [ \overline{\overline{p}} \lor \text{F} ] = [ p \lor \text{F} ] = p</mrow>
					</md>
				</proof>
			</theorem>

			<p>実際の背理法の手順は、次のようになる。</p>
			<algorithm>
				<title>背理法</title>
				<statement>
					命題<m>p</m>が真であることを示す場合、次のようにする。
					<ol>
						<li>命題<m>p</m>が偽であると仮定し、<m>p</m>の否定<m>\overline{p}</m>が真であるとみなす。</li>
						<li><m>\overline{p}</m>に対して、演繹による推論を重ねる。</li>
						<li>偽になる命題を導く。多くの場合、ある命題<m>r</m>についての<strong>矛盾</strong><m>r \land \overline{r}</m>を導く。
							具体的には、<m>r</m>が「<m>x</m>は有理数である」だとすると、「<m>x</m>は有理数である」と「<m>x</m>は有理数でない(無理数である)」の2つは同時に成り立たないので、この2つを示せば矛盾があるといえる。</li>
						<li>(3)での推論の結果、矛盾が導かれ偽になったので、(1)で仮定した<m>\overline{p}</m>が偽であるということになり、<m>p</m>が真であることが示される。</li>
					</ol>
				</statement>
			</algorithm>

			<p>背理法は、<em>示したい命題が単純すぎて議論を始めにくい</em>ときや、<em>示したい命題より、その否定の方が変形などを行いやすい</em>ときに用いる。</p>
			<example>
				<title>背理法の例: 和が1になる3数のうちには<m>\frac{1}{3}</m>以上のものがあることの証明</title>
				<statement>
					「和が1になる3数のうちには<m>\frac{1}{3}</m>以上のものがある」ことを、背理法で証明したい。
					命題「和が1になる3数のいずれかは<m>\frac{1}{3}</m>以上である」の否定は「<strong>和が1になる3数はいずれも<m>\frac{1}{3}</m>より小さい</strong>」であり、これが成り立つと仮定する。
					3数を<m>a, b, c</m>とすると、<m>a &lt; \frac{1}{3}, b &lt; \frac{1}{3}, c &lt; \frac{1}{3}</m>となる。
					このとき、<m>a + b + c &lt; \frac{1}{3} + \frac{1}{3} + \frac{1}{3} = 1</m>となるが、これは<strong><m>a + b + c = 1</m>であることと矛盾</strong>する。
					従って、仮定した命題「和が1になる3数はいずれも<m>\frac{1}{3}</m>より小さい」は偽であることが分かり、「和が1になる3数のうちには<m>\frac{1}{3}</m>以上のものがある」ことが示された。
				</statement>
			</example>

			<example>
				<title>背理法の例: 素数が無数にあることの証明</title>
				<statement>
					「素数が無数にある」ことを、背理法で証明したい。
					命題「素数が無数にある」の否定は「<strong>素数は有限個しかない</strong>」であり、これが成り立つと仮定する。
					すると、素数の個数は自然数<m>n</m>を用いて<m>n</m>個と表すことができ、<m>n</m>個の素数を<m>p_1, \cdots, p_n</m>と表すことができる。
					このとき、<strong>数<m>p = p_1 p_2 \cdots p_n + 1</m>を考える</strong>と、<m>p</m>を<m>p_1</m>で割ると1余り、<m>p</m>を<m>p_2</m>で割っても1余る。
					同様にすると、<m>p</m>を<m>p_i (i = 1, \cdots, n)</m>で割ると1余るので、<m>p</m>は<m>p_1, \cdots, p_n</m>のいずれとも互いに素になることが分かる。
					そのため<m>p</m>は<m>p_1, \cdots, p_n</m>のいずれとも異なる素数であるが、これは<strong>素数が<m>p_1, \cdots, p_n</m>しかないことと矛盾</strong>する。
					従って、仮定した命題「素数は有限個しかない」は偽であることが分かり、「素数が無数にある」ことが示された。
				</statement>
			</example>

			<example>
				<title>背理法の例: <m>\sqrt{2}</m>が無理数であることの証明</title>
				<statement>
					「<m>\sqrt{2}</m>が無理数である」ことを、背理法で証明したい。
					命題「<m>\sqrt{2}</m>が無理数である」の否定は「<strong><m>\sqrt{2}</m>が有理数</strong>である(<m>\sqrt{2} \in \mathbb{Q}</m>)」であり、これが成り立つと仮定する。
					すると、有理数は分数の形で表せる数なので、<m>\sqrt{2}</m>は整数<m>m, n</m>を用いて<m>\sqrt{2} = \frac{m}{n}</m>と表すことができる。
					このとき、分数<m>\frac{m}{n}</m>が既約分数である、つまり<strong>互いに素であるような整数<m>m, n</m>をとることができる</strong>。
					<m>\sqrt{2} = \frac{m}{n}</m>の両辺を2乗すると<m>2 = \frac{m^2}{n^2}</m>より<m>m^2 = 2 n^2</m>となり、<m>n</m>は整数<m>n^2</m>の2倍であるから<m>m^2</m>は偶数である。
					ここで、対偶を用いると命題「<m>m^2: \text{偶数} \implies m: \text{偶数}</m>」が成り立つことがいえる。
					<m>m</m>は偶数であるので、整数<m>k</m>を用いて<m>m = 2k</m>と表せる。
					<m>n^2 = \frac{m^2}{2} = \frac{(2k)^2}{2} = 2k^2</m>となるので、<m>n^2</m>も偶数である。
					先の命題を用いると、<m>n</m>は偶数であることが分かり、<m>m, n</m>はいずれも2で割り切れることが分かるが、これは<strong><m>m, n</m>が互いに素であることと矛盾</strong>する。
					従って、仮定した命題「<m>\sqrt{2} \in \mathbb{Q}</m>」は偽であることが分かり、「<m>\sqrt{2}</m>が無理数である」ことが示された。
				</statement>
			</example>
		</subsection>
	</section>
</chapter>
